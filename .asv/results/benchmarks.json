{
    "benchmark_omega_config_loader.OmegaConfigLoaderSuite.time_destructive_merge": {
        "code": "class OmegaConfigLoaderSuite:\n    def time_destructive_merge(self):\n        \"\"\"Benchmark the destructive merging strategy.\"\"\"\n        base_config = {'key1': 'value1', 'key2': 'value2'}\n        env_config = {'key1': 'overridden_value1', 'key3': 'value3'}\n        self.config_loader._destructive_merge(base_config, env_config, str(self.local_dir))\n\n    def setup(self):\n        # Create a temporary directory with some dummy config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n        self.env = \"local\"\n        self.config_content = \"\"\"\n        key1: value1\n        key2: value2\n        nested_key:\n          nested_key1: nested_value1\n        \"\"\"\n        # Create base and local config directories\n        self.base_dir = self.conf_source / \"base\"\n        self.local_dir = self.conf_source / self.env\n        self.base_dir.mkdir(parents=True, exist_ok=True)\n        self.local_dir.mkdir(parents=True, exist_ok=True)\n    \n        # Create some dummy config files\n        with open(self.base_dir / \"config1.yml\", \"w\") as f:\n            f.write(self.config_content)\n    \n        with open(self.local_dir / \"config1.yml\", \"w\") as f:\n            f.write(self.config_content.replace(\"value1\", \"local_value1\"))\n    \n        # Create an instance of OmegaConfigLoader\n        self.config_loader = OmegaConfigLoader(conf_source=str(self.conf_source), env=self.env)",
        "min_run_count": 2,
        "name": "benchmark_omega_config_loader.OmegaConfigLoaderSuite.time_destructive_merge",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4154c8ab0f2cda5338e213c8e7c6a3587bd2555f731ad14746237b6dc0ef1eff",
        "warmup_time": -1
    },
    "benchmark_omega_config_loader.OmegaConfigLoaderSuite.time_initialization": {
        "code": "class OmegaConfigLoaderSuite:\n    def time_initialization(self):\n        \"\"\"Time the initialization of OmegaConfigLoader.\"\"\"\n        OmegaConfigLoader(conf_source=str(self.conf_source), env=self.env)\n\n    def setup(self):\n        # Create a temporary directory with some dummy config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n        self.env = \"local\"\n        self.config_content = \"\"\"\n        key1: value1\n        key2: value2\n        nested_key:\n          nested_key1: nested_value1\n        \"\"\"\n        # Create base and local config directories\n        self.base_dir = self.conf_source / \"base\"\n        self.local_dir = self.conf_source / self.env\n        self.base_dir.mkdir(parents=True, exist_ok=True)\n        self.local_dir.mkdir(parents=True, exist_ok=True)\n    \n        # Create some dummy config files\n        with open(self.base_dir / \"config1.yml\", \"w\") as f:\n            f.write(self.config_content)\n    \n        with open(self.local_dir / \"config1.yml\", \"w\") as f:\n            f.write(self.config_content.replace(\"value1\", \"local_value1\"))\n    \n        # Create an instance of OmegaConfigLoader\n        self.config_loader = OmegaConfigLoader(conf_source=str(self.conf_source), env=self.env)",
        "min_run_count": 2,
        "name": "benchmark_omega_config_loader.OmegaConfigLoaderSuite.time_initialization",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "7cca3f013fed564472bbe5b6eb133a362f610e1bf82a11771b1813ace88903b2",
        "warmup_time": -1
    },
    "benchmark_omega_config_loader.OmegaConfigLoaderSuite.time_load_config_without_merge": {
        "code": "class OmegaConfigLoaderSuite:\n    def time_load_config_without_merge(self):\n        \"\"\"Time how long it takes to load configurations without merging.\"\"\"\n        self.config_loader.load_and_merge_dir_config(\n            str(self.base_dir), patterns=[\"config1.yml\"], key=\"config1\", processed_files=set()\n        )\n\n    def setup(self):\n        # Create a temporary directory with some dummy config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n        self.env = \"local\"\n        self.config_content = \"\"\"\n        key1: value1\n        key2: value2\n        nested_key:\n          nested_key1: nested_value1\n        \"\"\"\n        # Create base and local config directories\n        self.base_dir = self.conf_source / \"base\"\n        self.local_dir = self.conf_source / self.env\n        self.base_dir.mkdir(parents=True, exist_ok=True)\n        self.local_dir.mkdir(parents=True, exist_ok=True)\n    \n        # Create some dummy config files\n        with open(self.base_dir / \"config1.yml\", \"w\") as f:\n            f.write(self.config_content)\n    \n        with open(self.local_dir / \"config1.yml\", \"w\") as f:\n            f.write(self.config_content.replace(\"value1\", \"local_value1\"))\n    \n        # Create an instance of OmegaConfigLoader\n        self.config_loader = OmegaConfigLoader(conf_source=str(self.conf_source), env=self.env)",
        "min_run_count": 2,
        "name": "benchmark_omega_config_loader.OmegaConfigLoaderSuite.time_load_config_without_merge",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "fc9ba722b9ef73ce238145fda6af74e090f6f5432070657bc7b3d04bed125686",
        "warmup_time": -1
    },
    "benchmark_omega_config_loader.OmegaConfigLoaderSuite.time_soft_merge": {
        "code": "class OmegaConfigLoaderSuite:\n    def time_soft_merge(self):\n        \"\"\"Benchmark the soft merging strategy.\"\"\"\n        base_config = {'key1': 'value1', 'key2': 'value2'}\n        env_config = {'key1': 'overridden_value1', 'key3': 'value3'}\n        self.config_loader._soft_merge(base_config, env_config)\n\n    def setup(self):\n        # Create a temporary directory with some dummy config files\n        self.temp_dir = tempfile.TemporaryDirectory()\n        self.conf_source = Path(self.temp_dir.name)\n        self.env = \"local\"\n        self.config_content = \"\"\"\n        key1: value1\n        key2: value2\n        nested_key:\n          nested_key1: nested_value1\n        \"\"\"\n        # Create base and local config directories\n        self.base_dir = self.conf_source / \"base\"\n        self.local_dir = self.conf_source / self.env\n        self.base_dir.mkdir(parents=True, exist_ok=True)\n        self.local_dir.mkdir(parents=True, exist_ok=True)\n    \n        # Create some dummy config files\n        with open(self.base_dir / \"config1.yml\", \"w\") as f:\n            f.write(self.config_content)\n    \n        with open(self.local_dir / \"config1.yml\", \"w\") as f:\n            f.write(self.config_content.replace(\"value1\", \"local_value1\"))\n    \n        # Create an instance of OmegaConfigLoader\n        self.config_loader = OmegaConfigLoader(conf_source=str(self.conf_source), env=self.env)",
        "min_run_count": 2,
        "name": "benchmark_omega_config_loader.OmegaConfigLoaderSuite.time_soft_merge",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "773adbfe10d508b33a54fe73367b660cb074115b21a638df7104497b2327e6d6",
        "warmup_time": -1
    },
    "benchmarks.MemSuite.mem_list": {
        "code": "class MemSuite:\n    def mem_list(self):\n        return [0] * 256",
        "name": "benchmarks.MemSuite.mem_list",
        "param_names": [],
        "params": [],
        "type": "memory",
        "unit": "bytes",
        "version": "abe86bab484550a681c61d7bb6eb081fbd37eb6d5009eba1df85c935530577b9"
    },
    "benchmarks.TimeSuite.time_keys": {
        "code": "class TimeSuite:\n    def time_keys(self):\n        for key in self.d.keys():\n            pass\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_keys",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "86e015a3c40c52da31e4185fff7c7176c38c5e1e1e4aba71912db0b388225191",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_range": {
        "code": "class TimeSuite:\n    def time_range(self):\n        d = self.d\n        for key in range(500):\n            d[key]\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_range",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "72a6802b5ba2270cc4af88ddbd67e3c44fe4f4c8b292257438a394167fbb158b",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_values": {
        "code": "class TimeSuite:\n    def time_values(self):\n        for value in self.d.values():\n            pass\n\n    def setup(self):\n        self.d = {}\n        for x in range(500):\n            self.d[x] = None",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_values",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "cace9f2d006aa364dcf5762823afba3680c2fb50179ee30beaf880c0697256e2",
        "warmup_time": -1
    },
    "version": 2
}